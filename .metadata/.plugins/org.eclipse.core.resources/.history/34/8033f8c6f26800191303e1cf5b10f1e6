package com.hs.gofmpro.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;

import com.hs.gofmpro.base.TestBase;

public class TestUtil extends TestBase{
		public static long PAGE_LOAD_TIMEOUT = 20;
		public static long IMPLICIT_WAIT = 10;
		public static String TESTDATA_SHEET_PATH = "/home/zentere/workspace/gofmpro/src"
				+ "/main/resources/com/hs/gofmpro/resources/Gofmpro.xlsx";
		static Workbook book;
		static Sheet sheet;
		XSSFWorkbook wb;
		XSSFSheet sheet1;
		FileInputStream fis;
		
	public static String[][] fetchDataFromExcel(String TESTDATA_SHEET_PATH) throws IOException{
		
		File excel = new File(TESTDATA_SHEET_PATH);
		FileInputStream fis = new FileInputStream(excel);
		XSSFWorkbook wb = new XSSFWorkbook(fis);
		XSSFSheet ws = 	wb.getSheet("GofInput");
		int rowNum= ws.getLastRowNum()+1;
		int colNum = ws.getRow(0).getLastCellNum();
		String[][] data = new String[rowNum][colNum];
		for(int i = 0; i<rowNum; i++){
			XSSFRow row = ws.getRow(i);
			for(int k = 0; k<colNum;k++){
				XSSFCell cell = row.getCell(k);
				String value = cellToString(cell);
				data[i][k] = value;
				
			}
			
		}
		//wb.close();
		fis.close();
		return data;
		
	}
	
	public static String cellToString(XSSFCell cell){
		int type;
		Object result;
		String strReturn = null;
		if(cell==null){
			strReturn="";
		}else{
			switch (cell.getCellType()){
			case Cell.CELL_TYPE_NUMERIC:
			result= cell.getNumericCellValue();
			strReturn= result.toString();
			break;
			case Cell.CELL_TYPE_STRING:
			result = cell.getStringCellValue();
			strReturn= result.toString();
			break;
			default:
				strReturn= null;
			}
			}return strReturn;
	}
		
		
		
		
		
		
		/*//new
		
		public static Object[][] getTestData1(String sheetName) throws IOException {
	        FileInputStream fileIn = null;
	        FileOutputStream fileOut = null;
	        Workbook wb = null;
	        List excelData = null;
	        try
	        {
	            fileIn = new FileInputStream("/home/zentere/workspace/gofmpro/src"
				+ "/main/resources/com/hs/gofmpro/resources/Gofmpro.xlsx");
	            wb = new XSSFWorkbook(fileIn);
	            Sheet sheet = wb.getSheetAt(0);
	            Row row0 = sheet.getRow(0);
	            Row row1 = sheet.getRow(1);
	            if(row1 != null && row1 != null){
	                System.out.println(row0.getCell(0) + " : " + row1.getCell(0));
	                System.out.println(row0.getCell(1) + " : " + row1.getCell(1));
	                System.out.println(row0.getCell(2) + " : " + row1.getCell(2));
	            }
	            else{
	                System.out.println("Either of rows 0 or 1 is empty");
	            }
	    		Object[][] data = getTestData1(sheetName);
				return  data;
	            
	        

	        } finally {
	            if(wb != null)
	                ((FileInputStream) wb).close();
	            if (fileOut != null)
	                fileOut.close();
	            if (fileIn != null)
	                fileIn.close();
	        }
	    }	
		
		
		//new
		*/
		
		
		
		
		//new 2
	/*	private static final String FILE_PATH = "/home/zentere/workspace/gofmpro/src"
				+ "/main/resources/com/hs/gofmpro/resources/Gofmpro.xlsx";
	    @SuppressWarnings({ "resource", "rawtypes", "unchecked" })
	    public static   Object[][]getTestData1(String sheetName)  throws IOException {
	        FileInputStream excelFile = null;
	        Sheet datatypeSheet = null;
	        Workbook workbook = null;
	        List excelData = null;
	        
	        excelData = new ArrayList();
	        excelFile = new FileInputStream(new File(FILE_PATH));
	        workbook = new XSSFWorkbook(excelFile);
	        datatypeSheet = workbook.getSheetAt(0);
	        Iterator<Row> iterator = datatypeSheet.iterator();
	        while (iterator.hasNext()) {
	            Row currentRow = iterator.next();
	            Iterator<Cell> cellIterator = currentRow.iterator();
	            while (cellIterator.hasNext()) {
	                Cell currentCell = cellIterator.next();
	                excelData.add(currentCell);
	            }
	        }
	        for (int i = 0; excelData.size() > i; i++) {
	            if (i % 3 == 0) {
	                System.out.println();
	            }
	            System.out.print(" " + excelData.get(i) + "  ");
	        }
	        Object data[][] =	TestUtil.getTestData1(FILE_PATH);
			return data;
	    }*/
	   
	
			   public static Object[][]  readExcel(String filePath,String fileName,String sheetName) throws IOException{
			        //Create a object of File class to open xlsx file
			        File file = new File(filePath+"/home/zentere/workspace/gofmpro/src"
				+ "/main/resources/com/hs/gofmpro/resources/Gofmpro.xlsx"+fileName);
			        //Create an object of FileInputStream class to read excel file
			        FileInputStream inputStream = new FileInputStream(file);
			        Workbook myWorkbook = null;
			        //Find the file extension by spliting file name in substring and getting only extension name
			        //indexOf gives the index of . in the file name
			        //substring method splits the string starting from index of . to the end
			        String fileExtensionName = fileName.substring(fileName.indexOf("."));
			       
			        //Check condition if the file is xlsx file
			        if(fileExtensionName.equals(".xlsx")){
			        //If it is xlsx file then create object of XSSFWorkbook class
			        	myWorkbook = new XSSFWorkbook(inputStream);
			        }
			        //Check condition if the file is xls file
			        else if(fileExtensionName.equals(".xls")){
			            //If it is xls file then create object of HSSFWorkbook class
			        	myWorkbook = new HSSFWorkbook(inputStream);
			        }
			        //Read sheet inside the workbook by its name
			        Sheet mySheet = myWorkbook.getSheet(sheetName);
			        //Find number of rows in excel file
			        int rowCount = mySheet.getLastRowNum()- mySheet.getFirstRowNum();
			        
			        //Create a loop over all the rows of excel file to read it
			        for (int i = 0; i < rowCount+1; i++) {
			            Row row = mySheet.getRow(i);
			            //Create a loop to print cell values in a row
			            for (int j = 0; j < row.getLastCellNum(); j++) {
			                //Print excel data in console
			                System.out.print(row.getCell(j).getStringCellValue()+"|| ");
			            }
			            System.out.println();
			        }
					return null;		    
			   }
			
	  
	    
		
		
		
		
 
public static Object[][] getTestData(String sheetName) {
		FileInputStream file = null;
		try {
		file = new FileInputStream(TESTDATA_SHEET_PATH);
		} catch (FileNotFoundException e) {
		e.printStackTrace();
		}
		try {
		book = WorkbookFactory.create(file);
		} catch (InvalidFormatException e) {
		e.printStackTrace();
		} catch (IOException e) {
		e.printStackTrace();
		}
		sheet = book.getSheet(sheetName);
		Object[][] data = new Object[sheet.getLastRowNum()][sheet.getRow(0).getLastCellNum()];
		System.out.println(sheet.getLastRowNum() + "--------" +
				sheet.getRow(0).getLastCellNum());
		
		for (int i = 0; i < sheet.getLastRowNum(); i++) {
			for (int k = 0; k < sheet.getRow(0).getLastCellNum(); k++) {
				data[i][k] = sheet.getRow(i + 1).getCell(k).toString();
			
			 System.out.println(data[i][k]);

			}
			}
		return data;
		}
public 	static  String captureScreenshot(WebDriver driver,String screenshotName)

		{
		try {
		TakesScreenshot ts=(TakesScreenshot)driver;
		File source=ts.getScreenshotAs(OutputType.FILE);
		String dest =System.getProperty("user.dir")+"/ErrorScreenshot/"+screenshotName+".png";
		File destination = new File(dest);
		FileUtils.copyFile(source,destination );
		System.out.println("Screen shot taken");
		return dest;
		}
		catch (Exception e1)
		{
		System.out .println("Exception while taking the screen shot"+e1. getMessage());
		return e1.getMessage();	
		} 	
		}






	}
	
	


